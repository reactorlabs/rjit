#!/bin/bash

EXPECTED_FAIL=23

TESTR=$1
if [ -z "$TESTR" ]; then
    echo "usage: $0 path/to/testr/samples"
    exit 1
fi

SCRIPTPATH=`cd $(dirname "$0") && pwd`
export SCRIPTPATH
if [ ! -d $SCRIPTPATH ]; then
    echo "Could not determine absolute dir of $0"
    echo "Maybe accessed with symlink"
fi

. "${SCRIPTPATH}/../.local.config"
. "${SCRIPTPATH}/script_include.sh"
export -f ncores

FAILED_STATUS=$(mktemp /tmp/r-test-failed-status.XXXXXX)
touch $FAILED_STATUS
export FAILED_STATUS
STATUS=$(mktemp /tmp/r-test-status.XXXXXX)
touch $STATUS
export STATUS

PARENT=$$
export PARENT

function run_tests {
    TESTS_PATH=$0

    folder_name=`basename $TESTS_PATH`
    export folder_name

    NUM_SUBTEST=`find ${TESTS_PATH} -name '*.R' | wc -l`
    export NUM_SUBTEST

    SUB_STATUS=$(mktemp /tmp/r-test-status.XXXXXX)
    touch $SUB_STATUS
    export SUB_STATUS

    function status {
        done=`wc -l < $STATUS`
        failed=`wc -l < $FAILED_STATUS`
        subdone=`wc -l < $SUB_STATUS`
        echo -ne "\e[0K\rFolders [${done}/${NUM_TESTS}] | Failed [$failed] | $folder_name [$subdone/$NUM_SUBTEST]"
    }
    export -f status
    status

    function run_test {
        test=$0
        name=`basename $test`

        . "${SCRIPTPATH}/../.local.config"
        R="${R_HOME}/bin/R"
        
        if test "$(uname)" = "Darwin"; then
            LIB="dyn.load('${BUILD_DIR}/librjit.dylib')"
        else
            LIB="dyn.load('${BUILD_DIR}/librjit.so')"
        fi

        TEST=$(mktemp /tmp/r-test.XXXXXX)
    
        echo ${LIB} > $TEST
        echo "source('${ROOT_DIR}/rjit/R/rjit.R')" >> $TEST
        cat "${ROOT_DIR}/tools/testr_harness.R" >> $TEST
        cat "${test}" >> $TEST
    
        $( $R -f $TEST --args compile &> /dev/null || false)
        res=$?

        ps -p $PARENT &> /dev/null
        if [ $? -ne 0 ]; then
            exit
        fi

        if [ $res -ne 0 ]; then
            $( $R -f $TEST &> /dev/null || false)
            orig_res=$?
    
            if [ $res -ne $orig_res ]; then
                echo ""
                echo -e "\n=> $folder_name/$name : compiled version failed\n   $R -f $TEST --args compile"
                echo $TEST >> $FAILED_STATUS
            else
                rm $TEST
            fi
        else
            rm $TEST
        fi
        echo "." >> $SUB_STATUS
        status
    }
    export -f run_test
    let N=`ncores`/4
    if [ "$N" -lt "1" ]; then
        N=1
    fi
    find ${TESTS_PATH} -name '*.R' | xargs -n 1 -P $N bash -c 'run_test $@'

    echo $TESTS_PATH >> $STATUS
    status

    rm -rf $SUB_STATUS
}
export -f run_tests

NUM_TESTS=`find ${TESTR} -maxdepth 1 -type d | tail -n +2 | wc -l`
export NUM_TESTS

find ${TESTR} -maxdepth 1 -type d | tail -n +2 | xargs -n 1 -P 4 bash -c 'run_tests $@'

echo ""
failed=`wc -l < $FAILED_STATUS`

rm -rf $STATUS
rm -rf $FAILED_STATUS

echo "$failed tests (of $EXPECTED_FAIL expected) failed"
if [ $failed -gt $EXPECTED_FAIL ]; then
    exit 1
fi
